#include<bits/stdc++.h>
#define lc p<<1
#define rc p<<1|1
using namespace std;
using ll = long long;
const int N = 1e6;
int n, m;
ll a[N]; 
struct node {
    int l, r;
    ll sum; 
    ll add; 
} tr[4 * N];

void build(int p, int l, int r) {
    tr[p].l = l, tr[p].r = r;
    tr[p].add = 0;
    if (l == r) {
        tr[p].sum = a[l];
        return;
    }
    int m = (l + r) >> 1;
    build(lc, l, m);
    build(rc, m + 1, r);
    tr[p].sum = tr[lc].sum + tr[rc].sum;
}

void pushdown(int p) {
    if (tr[p].add) {
        tr[lc].sum += tr[p].add * (tr[lc].r - tr[lc].l + 1);
        tr[rc].sum += tr[p].add * (tr[rc].r - tr[rc].l + 1);
        tr[lc].add += tr[p].add;
        tr[rc].add += tr[p].add;
        tr[p].add = 0;
    }
}

ll find(int p, int x, int y) { 
    if (x <= tr[p].l && tr[p].r <= y) return tr[p].sum;
    pushdown(p);
    int m = (tr[p].l + tr[p].r) >> 1;
    ll sum = 0; 
    if (x <= m) sum += find(lc, x, y);
    if (y > m) sum += find(rc, x, y);
    return sum;
}

void update(int p, int x, int y, ll k) { 
    if (x <= tr[p].l && tr[p].r <= y) {
        tr[p].sum += (tr[p].r - tr[p].l + 1) * k;
        tr[p].add += k;
        return;
    }
    pushdown(p);
    int m = (tr[p].l + tr[p].r) >> 1;
    if (x <= m) update(lc, x, y, k);
    if (y > m) update(rc, x, y, k);
    tr[p].sum = tr[lc].sum + tr[rc].sum;
}

void solve() {
    cin >> n >> m;
    for (int i = 1; i <= n; i++) cin >> a[i];
    build(1, 1, n);
    while (m--) {
        int op;
        cin >> op;
        if (op == 1) {
            int l, r;
            ll k; 
            cin >> l >> r >> k;
            update(1, l, r, k);
        } else {
            int l, r;
            cin >> l >> r;
            cout << find(1, l, r) << endl;
        }
    }
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    solve();
    return 0;
}    
